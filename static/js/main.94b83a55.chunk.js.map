{"version":3,"sources":["Currency.jsx","App.js","reportWebVitals.js","index.js"],"names":["Currency","props","currencyOption","selectedCurrency","selectCurrency","amount","changeAmount","type","value","onChange","className","map","option","idx","URL","App","fromamount","toamount","useState","setcurrencyOption","fromCurrency","setfromCurrency","toCurrency","settoCurrency","exchangeRate","setexchangeRate","setamount","checkStatus","setcheckStatus","useEffect","fetch","then","res","json","info","firstCurrency","Object","keys","rates","base","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEe,SAASA,EAASC,GACjC,IACAC,EAKID,EALJC,eACAC,EAIIF,EAJJE,iBACAC,EAGIH,EAHJG,eACAC,EAEIJ,EAFJI,OACAC,EACIL,EADJK,aAEI,OACI,gCACI,uBAAOC,KAAK,SAASC,MAASH,EAAQI,SAAUH,EAAcI,UAAU,QACxE,wBAAQF,MAAOL,EAAkBM,SAAUL,EAAgBM,UAAU,MAArE,SACIR,EAAeS,KAAI,SAACC,EAAOC,GACzB,OAAO,wBAAQH,UAAU,KAAeF,MAAOI,EAAxC,SAAiDA,GAArBC,WCXrD,IAAMC,EAAM,gGAsEGC,MArEf,WACA,IAQKC,EAAYC,EARjB,EAA4CC,mBAAS,IAArD,mBAAOhB,EAAP,KAAuBiB,EAAvB,KACA,EAAwCD,qBAAxC,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,qBAApC,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAwCL,qBAAxC,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA4BP,mBAAS,GAArC,mBAAOb,EAAP,KAAeqB,EAAf,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAsCE,OAlCCD,GACDX,EAAaX,EACbY,EAAWZ,EAASmB,IAEpBP,EAAUZ,EACVW,EAAaX,EAASmB,GAGtBK,qBAAU,WACTC,MAAMhB,GACLiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACH,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAkB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UAClDjB,EAAgBa,EAAKI,OACrBf,EAAcY,QAEf,IAEHN,qBAAU,WACPC,MAAM,GAAD,OAAIhB,EAAJ,iBAAgBM,EAAhB,oBAAwCE,IAC5CS,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAAI,OAAKT,EAAgBS,EAAKI,MAAMhB,SAC3C,CAACF,EAAeE,IAYhB,sBAAKZ,UAAU,MAAf,UACE,oBAAIA,UAAU,OAAd,gCACF,qBAAKA,UAAU,YAAf,SACC,cAACV,EAAD,CACAE,eAAiBA,EACjBC,iBAAoBiB,EACpBhB,eAAiB,SAAAoC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAOjC,QAC/CH,OAAUW,EACVV,aAlBqB,SAACkC,GACzBd,EAAUc,EAAEC,OAAOjC,OACnBoB,GAAe,QAmBZ,qBAAKlB,UAAU,YAAf,SACA,cAACV,EAAD,CACAE,eAAiBA,EACjBC,iBAAoBmB,EACpBlB,eAAkB,SAAAoC,GAAC,OAAIjB,EAAciB,EAAEC,OAAOjC,QAC9CH,OAAUY,EACVX,aAtBoB,SAACkC,GACtBd,EAAUc,EAAEC,OAAOjC,OACnBoB,GAAe,YCnCJc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.94b83a55.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Currency(props) {\r\nconst {\r\ncurrencyOption,\r\nselectedCurrency,\r\nselectCurrency,\r\namount,\r\nchangeAmount\r\n} = props\r\n    return (\r\n        <div>\r\n            <input type=\"number\" value = {amount} onChange={changeAmount} className='inp'/>\r\n            <select value={selectedCurrency} onChange={selectCurrency} className='sel'>\r\n               {currencyOption.map((option,idx) => {\r\n                  return <option className='op' key={idx} value={option}>{option}</option>\r\n               })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React , {useState , useEffect} from 'react';\nimport './App.css';\nimport Currency from './Currency'\n\nconst URL = 'http://api.exchangeratesapi.io/v1/latest?access_key=b540c23e50dd9b7640727b8dcd40a15f&format=1';\nfunction App() {\nconst [currencyOption, setcurrencyOption] = useState([])\nconst [fromCurrency, setfromCurrency] = useState()\nconst [toCurrency, settoCurrency] = useState()\nconst [exchangeRate, setexchangeRate] = useState()\nconst [amount, setamount] = useState(1)\nconst [checkStatus, setcheckStatus] = useState(true)\n\n\n let fromamount, toamount\nif(checkStatus){\n  fromamount = amount\n  toamount = amount * exchangeRate\n}else{\n  toamount =amount\n  fromamount = amount / exchangeRate\n}\n\n  useEffect(() => {\n   fetch(URL)\n   .then(res => res.json())\n   .then(info => {\n      const firstCurrency = Object.keys(info.rates)[0]\n      setcurrencyOption([info.base, ...Object.keys(info.rates)])\n      setfromCurrency(info.rates)\n      settoCurrency(firstCurrency)          \n   })\n  }, [])\n\n  useEffect(()=>{\n     fetch(`${URL}$base=${fromCurrency}$symbols=${toCurrency}`)\n     .then(res =>res.json())\n     .then(info =>  setexchangeRate(info.rates[toCurrency]))\n  },[fromCurrency , toCurrency])\n   \n const handlefromAmount = (e) =>{\n  setamount(e.target.value)\n  setcheckStatus(true)\n  }\n\n  const handletoAmount = (e) =>{\n    setamount(e.target.value)\n    setcheckStatus(false)\n    }\n  return (\n    <div className=\"App\">\n      <h2 className='name'>Currency Converter</h2>\n    <div className='currency1'>\n     <Currency \n     currencyOption ={currencyOption}\n     selectedCurrency = {fromCurrency} \n     selectCurrency ={e => setfromCurrency(e.target.value)}\n     amount = {fromamount}\n     changeAmount = {handlefromAmount}\n     />\n     </div>\n     <div className='currency2'>\n     <Currency \n     currencyOption ={currencyOption}\n     selectedCurrency = {toCurrency}\n     selectCurrency = {e => settoCurrency(e.target.value)}\n     amount = {toamount}\n     changeAmount = {handletoAmount}\n     />\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}